
dependencies needed npm install apollo-server-express graphql


import express from 'express';
import { ApolloServer } from 'apollo-server-express';
import dotenv from 'dotenv';
import connect_db from "./services/DB.js";
import typeDefs from "./schema.js";
import resolvers from "./resolvers.js";
import cookieParser from 'cookie-parser';

dotenv.config();

const app = express();
app.use(express.json());
app.use(cookieParser());

const server = new ApolloServer({ typeDefs, resolvers });
await server.start();
server.applyMiddleware({ app });

connect_db().then(() => {
  console.log('DB connected');
  app.listen(process.env.PORT, () => {
    console.log(`Server Running at http://localhost:${process.env.PORT}${server.graphqlPath}`);
  });
}).catch((e) => {
  console.log('Database connection error', e);
  process.exit(1);
});
--------------------------------------------------------------------------

import User from "./models/user.model.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const resolvers = {
  Query: {
    getUser: async (_, { id }) => await User.findById(id),
    getUsers: async () => await User.find({}),
    profile: async (_, { token }) => {
      const { userId } = jwt.verify(token, process.env.JWT_SECRET);
      return await User.findById(userId);
    }
  },
  Mutation: {
    signup: async (_, args) => {
      args.password = await bcrypt.hash(args.password, 10);
      const user = new User(args);
      await user.save();
      return user;
    },
    login: async (_, { emailId, password }) => {
      const user = await User.findOne({ emailId });
      if (!user) throw new Error("No user found");

      const isPasswordMatch = await bcrypt.compare(password, user.password);
      if (!isPasswordMatch) throw new Error("Invalid credentials");

      return jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    },
    updateUser: async (_, { id, ...data }) => {
      return await User.findByIdAndUpdate(id, data, { returnDocument: "after", runValidators: true });
    },
    deleteUser: async (_, { id }) => {
      const user = await User.findByIdAndDelete(id);
      return user ? `${user.firstName} deleted successfully` : "No user found";
    }
  }
};

export default resolvers;
---------------------------------------------------------

import { gql } from 'apollo-server-express';

const typeDefs = gql`
  type User {
    id: ID!
    firstName: String!
    lastName: String
    emailId: String!
    password: String!
    age: Int
    gender: String
    about: String
    skills: [String]
    photoUrl: String
  }

  type Query {
    getUser(id: ID!): User
    getUsers: [User]
    profile(token: String!): User
  }

  type Mutation {
    signup(
      firstName: String!
      lastName: String
      emailId: String!
      password: String!
      age: Int
      gender: String
      about: String
      skills: [String]
      photoUrl: String
    ): User

    login(emailId: String!, password: String!): String
    updateUser(id: ID!, lastName: String, gender: String, password: String, about: String, skills: [String], photoUrl: String): User
    deleteUser(id: ID!): String
  }
`;

export default typeDefs;